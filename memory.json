{"type":"entity","name":"App-Agent Project Kubeconfig","entityType":"configuration","observations":["The App-Agent project uses kubeconfig.yaml file in the project root for Kubernetes cluster connectivity","This kubeconfig file should be used for testing and development with the kind cluster","Used by the KubernetesDiscovery class and CLI commands for cluster operations","Essential for running integration tests and manual testing procedures","The kubeconfig file is located at `kubeconfig.yaml` in the project root directory (relative path)","This relative location ensures portability across different development environments","Any developer working on the App-Agent project should use `./kubeconfig.yaml` from the project root"]}
{"type":"entity","name":"App-Agent Git Push Process","entityType":"development_workflow","observations":["MANDATORY: Always run comprehensive quality checks before pushing code to Git repository","Execute full test suite with 'npm test' to ensure all 191+ tests pass","Run linting with 'npm run lint' to catch code style and potential issues","Build project with 'npm run build' to verify TypeScript compilation succeeds","Run security audit with 'npm audit' to check for dependency vulnerabilities","Verify setup script still works with './setup.sh' to ensure cluster creation functions","Check that all changes are properly committed and no untracked files remain","Validate CI/CD workflows will pass by running equivalent commands locally","For significant changes, test both CLI and MCP interfaces manually","Ensure any new features have corresponding tests and documentation","Automated pre-push script created as 'pre-push.sh' for consistent quality checks","Script runs linting, tests, build, security audit, and setup script validation","Script checks for uncommitted changes and provides helpful reminders","Can be run manually with './pre-push.sh' before pushing to Git","Validates both code quality and cluster setup functionality","Provides clear success/failure feedback with colored output","Includes reminders for commit message standards and task updates","Use meaningful commit messages following conventional commit format","Commit related changes together in logical units","Create descriptive branch names for feature work","Test CI/CD pipeline locally before pushing to avoid workflow failures","Update task status in Taskmaster when completing subtasks","Document implementation details in task completion updates","Include manual testing instructions in major feature completions","Maintain consistent code style across TypeScript codebase","Keep dependencies up to date and audit for security issues"]}
{"type":"entity","name":"App-Agent Development Methodology","entityType":"development_process","observations":["CRITICAL: Always follow Test-Driven Development (TDD) methodology for all code changes. Write tests FIRST, then implement code to satisfy the tests. This approach has been successfully used throughout Task 1 and must continue for all subsequent development work.","TDD Process: 1) Write failing tests that define expected behavior, 2) Implement minimal code to make tests pass, 3) Refactor for clean, maintainable code, 4) Repeat cycle for next feature","Never implement code changes without writing tests first - this ensures robust, well-tested implementations and prevents regressions","Project follows strict TDD discipline established in Task 1 with 192 passing tests demonstrating the effectiveness of this approach"]}
{"type":"entity","name":"Manual Validation Requirements for Feature Development","entityType":"development_practice","observations":["Manual validation should be a standard practice for any feature development, regardless of whether Taskmaster or other project management tools are used","Every feature addition or update should include manual testing instructions with step-by-step commands to verify functionality works correctly","Manual validation should include specific commands to test the implemented functionality, expected results, and success criteria","This practice ensures quality and reliability beyond automated testing","For Taskmaster specifically, this principle should be enforced by ensuring all generated tasks include manual validation requirements","When Taskmaster creates tasks, it should automatically include sections for: 1) Manual testing instructions with step-by-step commands, 2) Expected results and success criteria, 3) Verification procedures","The TDD approach emphasizes testing and validation, but manual verification provides an additional quality gate","Manual validation is particularly important for integration points, user interfaces, and system interactions that may not be fully covered by automated tests","Tasks should not be considered complete without executing the manual validation steps and confirming expected outcomes","This practice helps catch edge cases, usability issues, and integration problems that automated tests might miss"]}
{"type":"relation","from":"App-Agent Git Push Process","to":"App-Agent Project","relationType":"defines_workflow_for"}